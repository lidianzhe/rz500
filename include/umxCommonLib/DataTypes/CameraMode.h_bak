/**************************************************************************************************\

	Author:		Ralph
	Created:	29.05.2014

---------------------------------------------------------------------------------------------------

	Copyright (c) 2014 Smartsensors Ltd.

\**************************************************************************************************/

#ifndef __CAMERA_MODE_H__
#define __CAMERA_MODE_H__

#include <iostream>
#include <memory>
#include <stdexcept>
#include <sstream>
#include <string>

namespace CameraDefaults
{
    // Movement values are in microns.
	const int MaxXYMovementEnrollment = 400;
	const int MaxZMovementEnrollment = 4000;
    const int MaxXYMovementRecognition = 1000;
    const int MaxZMovementRecognition = 12000;
    const int MaxFrameDifferenceInEitherEyeSlave = 3;
    const int MaxFrameDifferenceInEitherEyeEnrollment = 9;
    const int MaxFrameDifferenceInEitherEyeRecognition = 3;
};

struct MovementLimits
{
    MovementLimits(const int maximumXYMovement, const int maximumZMovement)
        : XY(maximumXYMovement), Z(maximumZMovement)
    {
    };
    int XY;
    int Z;
};

class CameraMode
{
public:
    CameraMode(const int movementXYLimit, const int movementZLimit)
        : _movementLimits(movementXYLimit, movementZLimit)
    {};

    virtual ~CameraMode()
    {};

    virtual const std::string ToString() const=0;
    virtual const bool AutoStart() const=0;
    virtual const int MaxFrameDifferenceInEitherEye() const=0;
    virtual const MovementLimits MaxMovement() const
    {
        return _movementLimits;
    }
private:
    const MovementLimits _movementLimits;
};

class SlaveCameraMode : public CameraMode
{
public:
    SlaveCameraMode() : CameraMode(CameraDefaults::MaxXYMovementEnrollment, CameraDefaults::MaxZMovementEnrollment)
    {};

    virtual const std::string ToString() const
    {
        return "Slave";
    };

    virtual const bool AutoStart() const
    {
        return true;
    };

    virtual const int MaxFrameDifferenceInEitherEye() const
    {
        return CameraDefaults::MaxFrameDifferenceInEitherEyeSlave;
    };
};

class EnrolCameraMode : public CameraMode
{
public:
    EnrolCameraMode() : CameraMode(CameraDefaults::MaxXYMovementEnrollment, CameraDefaults::MaxZMovementEnrollment)
    {};

    virtual const std::string ToString() const
    {
        return "Enrol";
    };

    virtual const bool AutoStart() const
    {
        return true;
    };

    virtual const int MaxFrameDifferenceInEitherEye() const
    {
        return CameraDefaults::MaxFrameDifferenceInEitherEyeEnrollment;
    };
};

class RecogCameraMode : public CameraMode
{
public:
    RecogCameraMode() : CameraMode(CameraDefaults::MaxXYMovementRecognition, CameraDefaults::MaxZMovementRecognition)
    {};

    virtual const std::string ToString() const
    {
        return "Recog";
    };

    virtual const bool AutoStart() const
    {
        return true;
    };

    virtual const int MaxFrameDifferenceInEitherEye() const
    {
        return CameraDefaults::MaxFrameDifferenceInEitherEyeRecognition;
    };
};

class CameraModeFactory
{
public:
    static std::shared_ptr<CameraMode> CreateCameraMode(const std::string& mode)
    {
        std::shared_ptr<CameraMode> cameraMode;
        if (mode == "Slave")
            cameraMode.reset(new SlaveCameraMode());
        else if (mode == "Enrol")
            cameraMode.reset(new EnrolCameraMode());
        else if (mode == "Recog")
            cameraMode.reset(new RecogCameraMode());
        else
        {
            std::ostringstream os;
            os << "Camera mode '" << mode << "' is invalid.";
            throw std::invalid_argument(os.str());
        }
        return cameraMode;
    };
};

#endif //__CAMERA_MODE_H__
